---
name: Build & Release Archtsats

on:
  workflow_call:
    inputs:
      goos:
        required: true
        type: string
      goarch:
        required: true
        type: string
      package-name:
        type: string
        default: archstats
      bin-name:
        type: string
        default: archstats
      version:
        type: string
        required: true
      runson:
        type: string
        required: true

jobs:
  build-upload-binaries:
    runs-on: ${{ inputs.runson }}
    name: ${{ inputs.goos }} ${{ inputs.goarch }} ${{ inputs.version }}
    outputs:
      package_name: ${{ steps.set-outputs.outputs.package_name }}
      package_path: ${{ steps.set-outputs.outputs.package_path }}
      package_dir: ${{ steps.set-outputs.outputs.package_dir }}
    steps:
      - uses: actions/checkout@v3.5.3
      - uses: actions/setup-go@v4.0.1
        with:
          go-version: 1.21

      - name: Set Version
        run: |-
          echo "${{ inputs.version }}" > version/VERSION

      - if: ${{inputs.goos != 'darwin' }}
        run: |-
          sudo apt-get install gcc-multilib

      - if: ${{inputs.goos == 'windows' }}
        run: |-
          sudo apt-get install gcc-mingw-w64

      - if: ${{inputs.goos == 'windows' && inputs.goarch == 'amd64'}}
        run: |-
          echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV

      - if: ${{inputs.goos == 'windows' && inputs.goarch == '386'}}
        run: |-
          echo "CC=i686-w64-mingw32-gcc" >> $GITHUB_ENV

      - if: ${{inputs.goos == 'linux' && inputs.goarch == 'arm64'}}
        run: |-
          sudo apt-get install gcc-aarch64-linux-gnu
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - if: ${{inputs.goos == 'linux' && inputs.goarch == '386'}}
        run: |-
          echo "CC=gcc" >> $GITHUB_ENV

      - name: Determine artifact basename
        run: echo "ARTIFACT_BASENAME=${{ inputs.package-name }}-${{inputs.version}}-${{ inputs.goos }}-${{ inputs.goarch }}" >> $GITHUB_ENV
      - name: Build Archstats
        env:
          GOOS: ${{ inputs.goos }}
          GOARCH: ${{ inputs.goarch }}
          ACTIONSOS: ${{ inputs.runson }}
          CC: ${{ env.CC }}
          CGO_ENABLED: 1
        run: |-
          mkdir dist out
          set -x
          go build -o dist/ .

      - if: ${{ inputs.goos != 'windows' }}
        name: Create artifact (Tarball)
        run: |-
          tar -czf out/${{ env.ARTIFACT_BASENAME }}.tar.gz -C dist ${{ inputs.bin-name }}
          echo "ARTIFACT_PACKAGE=${{ env.ARTIFACT_BASENAME }}.tar.gz" >> $GITHUB_ENV

      - if: ${{ inputs.goos == 'windows' }}
        name: Create artifact (Zip)
        run: |-
          zip out/${{ env.ARTIFACT_BASENAME }}.zip dist/${{ inputs.bin-name }}.exe
          echo "ARTIFACT_PACKAGE=${{ env.ARTIFACT_BASENAME }}.zip" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PACKAGE }}
          path: out/${{ env.ARTIFACT_PACKAGE }}
          if-no-files-found: error

      - id: set-outputs
        run: |-
          echo "package_name=${{ env.ARTIFACT_PACKAGE }}" >> $GITHUB_OUTPUT
          echo "package_path=out/${{ env.ARTIFACT_PACKAGE }}" >> $GITHUB_OUTPUT
          echo "package_dir=out" >> $GITHUB_OUTPUT

  upload-to-release:
    needs: build-upload-binaries
    runs-on: ubuntu-latest
    env:
      PACKAGE_DIR: ${{ needs.build-upload-binaries.outputs.package_dir }}
      PACKAGE_NAME: ${{ needs.build-upload-binaries.outputs.package_name }}
      PACKAGE_PATH: ${{ needs.build-upload-binaries.outputs.package_path }}
    steps:
      - run: |-
          mkdir -p ${{ env.PACKAGE_DIR }}

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PACKAGE_DIR }}

      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          md5sum ${{ env.PACKAGE_PATH }} > ${{ env.PACKAGE_PATH }}.md5
          gh release upload ${{ inputs.version }} ${{ env.PACKAGE_PATH }} --repo archstats/archstats --clobber
          gh release upload ${{ inputs.version }} ${{ env.PACKAGE_PATH }}.md5 --repo archstats/archstats --clobber
          
        

